/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: zepben/protobuf/hc/opendss/OpenDssReport.proto */

#ifndef PROTOBUF_C_zepben_2fprotobuf_2fhc_2fopendss_2fOpenDssReport_2eproto__INCLUDED
#define PROTOBUF_C_zepben_2fprotobuf_2fhc_2fopendss_2fOpenDssReport_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "zepben/protobuf/hc/opendss/EnergyMeter.pb-c.h"
#include "zepben/protobuf/hc/opendss/Diagnostics.pb-c.h"

typedef struct OpenDssReport OpenDssReport;
typedef struct OpenDssReportBatch OpenDssReportBatch;


/* --- enums --- */


/* --- messages --- */

typedef enum {
  OPEN_DSS_REPORT__REPORT__NOT_SET = 0,
  OPEN_DSS_REPORT__REPORT_DI = 1,
  OPEN_DSS_REPORT__REPORT_PHV = 2,
  OPEN_DSS_REPORT__REPORT_OV = 3,
  OPEN_DSS_REPORT__REPORT_VR = 4,
  OPEN_DSS_REPORT__REPORT_SR = 5,
  OPEN_DSS_REPORT__REPORT_EL = 6,
  OPEN_DSS_REPORT__REPORT_TR = 7,
  OPEN_DSS_REPORT__REPORT_LR = 8,
  OPEN_DSS_REPORT__REPORT_IBR = 9,
  OPEN_DSS_REPORT__REPORT_LE = 10,
  OPEN_DSS_REPORT__REPORT_LOSSES = 11,
  OPEN_DSS_REPORT__REPORT_NM = 12,
  OPEN_DSS_REPORT__REPORT_KVM = 13
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(OPEN_DSS_REPORT__REPORT__CASE)
} OpenDssReport__ReportCase;

/*
 **
 * The message type we actually stream, which contains one of the EnergyMeter or Diagnostics reports.
 */
struct  OpenDssReport
{
  ProtobufCMessage base;
  OpenDssReport__ReportCase report_case;
  union {
    DemandIntervalReport *di;
    PhaseVoltageReport *phv;
    OverloadReport *ov;
    VoltageReport *vr;
    SummaryReport *sr;
    EventLog *el;
    TapsReport *tr;
    LoopReport *lr;
    IsolatedBusesReport *ibr;
    LossesEntry *le;
    LossesTotals *losses;
    NodeMismatch *nm;
    KVBaseMismatch *kvm;
  };
};
#define OPEN_DSS_REPORT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&open_dss_report__descriptor) \
    , OPEN_DSS_REPORT__REPORT__NOT_SET, {0} }


/*
 **
 * Batch of OpenDSS reports.
 */
struct  OpenDssReportBatch
{
  ProtobufCMessage base;
  size_t n_reports;
  OpenDssReport **reports;
};
#define OPEN_DSS_REPORT_BATCH__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&open_dss_report_batch__descriptor) \
    , 0,NULL }


/* OpenDssReport methods */
void   open_dss_report__init
                     (OpenDssReport         *message);
size_t open_dss_report__get_packed_size
                     (const OpenDssReport   *message);
size_t open_dss_report__pack
                     (const OpenDssReport   *message,
                      uint8_t             *out);
size_t open_dss_report__pack_to_buffer
                     (const OpenDssReport   *message,
                      ProtobufCBuffer     *buffer);
OpenDssReport *
       open_dss_report__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   open_dss_report__free_unpacked
                     (OpenDssReport *message,
                      ProtobufCAllocator *allocator);
/* OpenDssReportBatch methods */
void   open_dss_report_batch__init
                     (OpenDssReportBatch         *message);
size_t open_dss_report_batch__get_packed_size
                     (const OpenDssReportBatch   *message);
size_t open_dss_report_batch__pack
                     (const OpenDssReportBatch   *message,
                      uint8_t             *out);
size_t open_dss_report_batch__pack_to_buffer
                     (const OpenDssReportBatch   *message,
                      ProtobufCBuffer     *buffer);
OpenDssReportBatch *
       open_dss_report_batch__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   open_dss_report_batch__free_unpacked
                     (OpenDssReportBatch *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*OpenDssReport_Closure)
                 (const OpenDssReport *message,
                  void *closure_data);
typedef void (*OpenDssReportBatch_Closure)
                 (const OpenDssReportBatch *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor open_dss_report__descriptor;
extern const ProtobufCMessageDescriptor open_dss_report_batch__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_zepben_2fprotobuf_2fhc_2fopendss_2fOpenDssReport_2eproto__INCLUDED */
