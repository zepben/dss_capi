name: Build Zepben Linux Libraries Snapshot

on: 
  workflow_dispatch:
    inputs:
      commitID:
        description: 'Commit or branch to use for lib release'
        required: true
        type: string

jobs:
  find-commit:
    runs-on: ubuntu-latest
    outputs:
      commitID: ${{ steps.find-commit.outputs.commit }}

    steps:
      - uses: actions/checkout@v3

      - name: Work around git permission issue
        run: |
          dname=$(echo ${{github.repository}} | cut -d'/' -f2)
          git config --global --add safe.directory /__w/$dname/$dname
        shell: sh

      - name: Find commit
        id: find-commit
        run: |
          echo "commit=$(git rev-parse --short ${{ github.event.inputs.commitID }})" >> $GITHUB_ENV

  build_linux_x64:
    needs: [find-commit]
    runs-on: ubuntu-latest
    container: 
      image: ghcr.io/zepben/dss-capi-builder:latest

    env:
      GITHUB_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ needs.find-commit.outputs.commitID }}

      - name: Build the libraries
        run: |
          make ci
        shell: bash

      - name: Define the commit version
        run: |
          version=$(grep -E "## \[[0-9]+\.[0-9]+\.[0-9]\.[0-9]+-zepben[[:digit:]]+\]" changelog.md | grep UNRELE | head -n 1 | cut -f2 -d' ' | sed -E 's/\[//g;s/\]//g')
          echo "VERSION=$(echo $version)" >> $GITHUB_ENV

      - name: Package the libraries
        run: |
          make package
          mv package/dss-libs.bz2 package/dss-libs-${{ env.VERSION }}.bz2
        shell: bash


      - name: Create artefact
        uses: actions/upload-artifact@master
        with:
          name: dss-libs-${{ env.VERSION }}.bz2 
          path: package/dss-libs-${{ env.VERSION }}.bz2 

      - name: Update version for snapshot release
        id: check
        run: |
          build/update-changelog.sh $VERSION snapshot
        shell: bash
        continue-on-error: false

      - name: Merge and Tag
        id: merge
        run: |
          git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
          git fetch --all
          git branch -a
          git merge origin/release
          git push origin ${GITHUB_REF/refs\/heads\//}
          git tag "v$VERSION"
          git push --tags
          echo "Built and tagged library version v$VERSION" >> $GITHUB_STEP_SUMMARY
        shell: bash
        continue-on-error: true

      - name: Fail if previous step failed
        if: steps.merge.outcome == 'failure'
        run: |
          git push origin -d release
          echo "There was an error in merging the branch. Release branch was deleted." >> $GITHUB_STEP_SUMMARY
          exit 1
        shell: bash
